import { JsonStory, MatrixItem, Explanation } from './models';

import Java from '../store/java.json';
import Lisp from '../store/lisp.json';

export const ROWS = {
    'core': 'Ядро (К)',
    'expansion': 'Специальные функции (Р)',
    'limit': 'Ограничения (В)',
    'union': 'Общность, Практичность (U)',
};

export const COLUMN_NAMES = ['Константы (V)', 'Вычисления (E)', 'Память (M)', 'Управление (C)', 'Структуры (S)'];


export const TEST_LANGUAGES: JsonStory[] = [Java, Lisp];

// ROW
export const CATEGORYS_OF_SEMANTIC_SYSTEMS: MatrixItem[] = [
    { name: 'Ядро', code: 'E', },
    { name: 'Макро', code: 'M', },
    { name: 'Границы', code: 'C', },
    { name: 'Общность', code: 'S', },
];

// Column
export const METHODS_OF_IMPLEMENTATION_SUPPORT: MatrixItem[] = [
    { name: 'Значения', code: 'V', },
    { name: 'Выражения', code: 'E', },
    { name: 'Память', code: 'M', },
    { name: 'Контроль', code: 'C', },
    { name: 'Структуры', code: 'S', },
];

export const MATRIX_EXPLANATION: Explanation[] = [
    { code: 'EV', explanation: `Самоопределяемые скаляры, их смысл не требует интерпретации, текстовое представление понятно без комментариев.` },
    { code: 'EE', explanation: `Операции над скалярами, они должны вырабатывать скаляры. При выходе за границы V могут его пополнять или вырабатывать сигнал неуспеха Множество значений может быть пополнено представлениями формул.` },
    { code: 'EM', explanation: `Обработка памяти над таблицей адресов с соответствующими им значениями. Адреса и таблица могут быть значениями или не рассматриваться как значения и использоваться неявно как сущности другой природы. Появляется именование значений и формул, что расширяет класс допустимых формул, обеспечивает многократное использование хранимых результатов и приводит к понятию «данное».` },
    { code: 'EC', explanation: `Безусловное и условное (без «else») управление процессом вычислений, приоритеты в формулах вычисления и переход к очередному действию или по метке.` },
    { code: 'ES', explanation: `Конструирование последовательностей по принципу соседства и перебора слева направо дополняются возможностью возвратов или выбора любого элемента ради обратимости. Как правило это вектора или строки.` },
    { code: 'MV', explanation: `Хранимые данные могут иметь имена, что позволяет решать проблемы укрупнения используемых единиц, воспринимаемых равноправно со скалярами и операциями. Возникают имена логических значений для представления условий выбора хода процесса.` },
    { code: 'ME', explanation: `Композиции операций рассматриваются как безымянные функции, равноправные базовым операциям, они могут обрабатывать и вырабатывать не только скаляры, но любые определённые данные, используя упаковку ряда значений в последовательность.` },
    { code: 'MM', explanation: `Именование функций упрощает их многократное использование в формулах, включая представление рекурсии.` },
    { code: 'MC', explanation: `Композиции операций и функций можно рассматривать как одно действие, что приводит к понятию «блок», выделенный скобками, влияющими на порядок вычислений и задающими области видимости имён — иерархия. Появляются системные процедуры, что может приводить к неконсервативным расширениям.` },
    { code: 'MS', explanation: `Структуры однородных данных и процессов сопровождаются дисциплиной доступа к элементам — FIFO, FILO, взаимоисключение, одновременность или др.` },
    { code: 'CV', explanation: `Множество значений пополняется специальными представлениями сигналов «успех-провал» процесса независимо от существования логических значений, а также текстами диагностических сообщений.` },
    { code: 'CE', explanation: `Появляется понятие «предикат» и специальная функция ERROR для выбора обработчиков диагностических ситуаций и продолжения недоопределённых вычислений.` },
    { code: 'CM', explanation: `Появляется типизация значений и данных, а также сигнатур операций и функций, используемая для профилактики неудачных вычислений.` },
    { code: 'CC', explanation: `Вводятся специальные схемы управления вычислениями на основе проверки условий соответствия данных и действий для их обработки.` },
    { code: 'CS', explanation: `Появляются структуры с равноправным доступом к разнородным элементам, возможно с их разметкой и указанием кратности вхождения.` },
    { code: 'SV', explanation: `Вводятся мультизначения и специальные значения для представления разного рода неопределённостей, раскрытие или игнорирование которых может быть полезно для продолжения вычислений.` },
    { code: 'SE', explanation: `Появляются операции над произвольным числом параметров, их распространение на любые структуры данных, проекции формул, отложенные вычисления, формулы доопределения и продолжения вычислений.` },
    { code: 'SM', explanation: `Понятие присваивания распространяется на обмен данными с переферийными устройствами. Возникает идентификация устройств, абстрактные и конкретные имена, паспорта взаимодействий, сигналы готовности действий, время ожидания отклика от устройства, копии и многое другое, отражающее специфику разного оборудования.` },
    { code: 'SC', explanation: `Возникают отображения, средства ввода-вывода, сетевое управление, потоки, эстафета обслуживания, итерирование, условия срабатывания, актив-пассив, администрирование, сервер, ОС.` },
    { code: 'SS', explanation: `Одновременность, синхронизация, взаимоисключения, сигналы и сообщения, пакеты, настройки, сервисы, конфигурации.` },
];
